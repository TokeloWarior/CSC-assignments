package MonteCarloMini;

import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.RecursiveTask;
import java.util.ArrayList;

public class SearchParallel{


  private int id;				// Searcher identifier
	private int pos_row, pos_col;		// Position in the grid
	private int steps; //number of steps to end of search
	private boolean stopped;			// Did the search hit a previous trail?
  private TerrainArea terrain;
   
	enum Direction {
		STAY_HERE,
	    LEFT,
	    RIGHT,
	    UP,
	    DOWN
	  }
     
   public SearchParallel(){
      //free constructor to call the ForkJoinTask class
   }
   public SearchParallel(int id, int pos_row, int pos_col, TerrainArea terrain) {
		this.id = id;
		this.pos_row = pos_row; //randomly allocated
		this.pos_col = pos_col; //randomly allocated
		this.terrain = terrain;
		this.stopped = false;
	}
   
   public Integer find_valleys() {	
		int height=Integer.MAX_VALUE;
		Direction next = Direction.STAY_HERE;
		while(terrain.visited(pos_row, pos_col)==0) { // stop when hit existing path
			height=terrain.get_height(pos_row, pos_col);
			terrain.mark_visited(pos_row, pos_col, id); //mark current position as visited
			steps++;
			next = terrain.next_step(pos_row, pos_col);
			switch(next) {
				case STAY_HERE: return height; //found local valley
				case LEFT: 
					pos_row--;
					break;
				case RIGHT:
					pos_row=pos_row+1;
					break;
				case UP: 
					pos_col=pos_col-1;
					break;
				case DOWN: 
					pos_col=pos_col+1;
					break;
			}
		}
		stopped=true;
		return height;
	}     
   
   public int getID() {
		return id;
	}

	public int getPos_row() {
		return pos_row;
	}

	public int getPos_col() {
		return pos_col;
	}

	public int getSteps() {
		return steps;
	}
	public boolean isStopped() {
		return stopped;
	}

    // ForkJoinTask class for parallelizing the search process
   class ForkJoinTask<Integer> extends RecursiveTask<ArrayList<Integer>> {
       private SearchParallel[] searchers;
       private int start;
       private int end;
       private int SEQ_CUTOFF=50;  //sequential cutoff
   
       public ForkJoinTask(SearchParallel[] searchers, int start, int end) {
           this.searchers = searchers;
           this.start = start;
           this.end = end;
       }
       
      /**
       *Driver method for the threads to follow when finding the minimum
       *what happens is that, every thread created have its own random 
       *column and row position to work with, therefore if after a thread
       *found a minimum, it waits for other threads and get the final answer
       *add them in to an arry in that order to late comparisons.
      **/
       @Override
      protected ArrayList<Integer> compute() {
           if (end - start <= SEQ_CUTOFF) {
               // Handle the searchers directly in this task
               ArrayList<Integer> result = new ArrayList<Integer>(); //to store all the possible min values
               for (int i = start; i < end; i++) {
                   result.add((Integer) searchers[i].find_valleys()); //possible min values
               }
               return result;
           }
           
           // dividng the searchers array in half for threads to work with
           int mid = (start + end) / 2;
   
           ForkJoinTask<Integer> leftTask = new ForkJoinTask<>(searchers, start, mid); //left part
           ForkJoinTask<Integer> rightTask = new ForkJoinTask<>(searchers, mid, end);  //right part
   
           leftTask.fork();  //start execution on the left part
           ArrayList<Integer> rightResult = rightTask.compute(); //start execution on the right part and get results
           ArrayList<Integer> leftResult = leftTask.join(); //get results of the left part
           leftResult.addAll(rightResult); //make the left part and right part to be in one array
         
           return leftResult;
       }
   }
   
}

